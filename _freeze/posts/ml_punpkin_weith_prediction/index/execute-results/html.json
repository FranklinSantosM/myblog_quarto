{
  "hash": "d32cb3b1212b5247b01f4ad21d5d6c6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Análisis predictivo usando tidymodels\"\ndescription: |\n  Cómo utilizar tidymodels para construir y evaluar modelos predictivos que estimen el peso de calabazas gigantes.\ncategories: [AI, Machine Learning, Model]\nauthor:\n  - name: Franklin Santos\n    url: https://www.franklinsantosm.com\n    affiliation: Universidad Austral de Chile\n    orcid: 0000-0002-7509-2910\n    email: franklin25santos@gmail.com\ndate: \"2024-09-29\"\nimage: fs.png\ncitation: true\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\nbody {\ntext-align: justify}\n</style>\n```\n\n\n\n## Introducción\n\nEn este post, exploraremos cómo utilizar `tidymodels` para construir y evaluar modelos predictivos que estimen el peso de calabazas gigantes. Además, agregaremos visualizaciones clave para analizar la correlación entre variables predictoras, el desempeño del modelo en validación cruzada, y la precisión de las predicciones.\n\n### Carga y Preparación de Datos\n\nPrimero, cargamos los datos y seleccionamos las variables de interés, asegurándonos de que estén limpias y en un formato adecuado para el modelado.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librerías\nlibrary(tidymodels)\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar y preparar datos\npumpkins_raw <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-19/pumpkins.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 28065 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (14): id, place, weight_lbs, grower_name, city, state_prov, country, gpc...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npumpkins <-\n  pumpkins_raw %>%\n  separate(id, into = c(\"year\", \"type\")) %>%\n  mutate(across(c(year, weight_lbs, ott, place), parse_number)) %>%\n  filter(type == \"P\") %>%\n  select(weight_lbs, year, place, ott, gpc_site, country)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(c(year, weight_lbs, ott, place), parse_number)`.\nCaused by warning:\n! 2327 parsing failures.\nrow col expected actual\n 13  -- a number    EXH\n 36  -- a number    EXH\n 58  -- a number    EXH\n 60  -- a number    EXH\n 61  -- a number    EXH\n... ... ........ ......\nSee problems(...) for more details.\n```\n\n\n:::\n\n```{.r .cell-code}\npumpkins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15,965 × 6\n   weight_lbs  year place   ott gpc_site                                 country\n        <dbl> <dbl> <dbl> <dbl> <chr>                                    <chr>  \n 1      2032   2013     1   475 Uesugi Farms Weigh-off                   United…\n 2      1985   2013     2   453 Safeway World Championship Pumpkin Weig… United…\n 3      1894   2013     3   445 Safeway World Championship Pumpkin Weig… United…\n 4      1874.  2013     4   436 Elk Grove Giant Pumpkin Festival         United…\n 5      1813   2013     5   430 The Great Howard Dill Giant Pumpkin Cla… Canada \n 6      1791   2013     6   431 Elk Grove Giant Pumpkin Festival         United…\n 7      1784   2013     7   445 Uesugi Farms Weigh-off                   United…\n 8      1784.  2013     8   434 Stillwater Harvestfest                   United…\n 9      1780.  2013     9   422 Stillwater Harvestfest                   United…\n10      1766.  2013    10   425 Durham Fair Weigh-Off                    United…\n# ℹ 15,955 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dividir datos en conjunto de entrenamiento y prueba\nset.seed(123)\ndata_split <- initial_split(pumpkins, prop = 0.8)\npumpkin_train <- training(data_split)\npumpkin_test <- testing(data_split)\n```\n:::\n\n\n\n\n### Análisis Exploratorio\n\nLa relación principal aquí es entre el volumen/tamaño de la calabaza y el peso.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npumpkins %>%\n  filter(ott > 20, ott < 1e3) %>%\n  ggplot(aes(ott, weight_lbs, color = place)) +\n  geom_point(alpha = 0.2, size = 1.1) +\n  labs(x = \"over-the-top inches\", y = \"weight (lbs)\") +\n  scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n  >Las calabazas grandes y pesadas se colocaban más cerca de ganar en los concursos, ¡naturalmente!\n\n¿Se ha producido algún cambio en esta relación con el paso del tiempo?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npumpkins %>%\n  filter(ott > 20, ott < 1e3) %>%\n  ggplot(aes(ott, weight_lbs)) +\n  geom_point(alpha = 0.2, size = 1.1, color = \"gray60\") +\n  geom_smooth(aes(color = factor(year)),\n    method = lm, formula = y ~ splines::bs(x, 3),\n    se = FALSE, size = 1.5, alpha = 0.6\n  ) +\n  labs(x = \"over-the-top inches\", y = \"weight (lbs)\", color = NULL) +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n  >Creo que es difícil de decir.\n\n\n¿Qué países producían calabazas más o menos grandes?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npumpkins %>%\n  mutate(\n    country = fct_lump(country, n = 10),\n    country = fct_reorder(country, weight_lbs)\n  ) %>%\n  ggplot(aes(country, weight_lbs, color = country)) +\n  geom_boxplot(outlier.colour = NA) +\n  geom_jitter(alpha = 0.1, width = 0.15) +\n  labs(x = NULL, y = \"weight (lbs)\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Construir y ajustar un conjunto de flujo de trabajo\n\nEmpecemos nuestro modelado estableciendo nuestro «presupuesto de datos». Estratificaremos por nuestro resultado `weight_lbs`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\npumpkin_split <- pumpkins %>%\n  filter(ott > 20, ott < 1e3) %>%\n  initial_split(strata = weight_lbs)\n\npumpkin_train <- training(pumpkin_split)\npumpkin_test <- testing(pumpkin_split)\n\nset.seed(234)\npumpkin_folds <- vfold_cv(pumpkin_train, strata = weight_lbs)\npumpkin_folds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#  10-fold cross-validation using stratification \n# A tibble: 10 × 2\n   splits             id    \n   <list>             <chr> \n 1 <split [8954/996]> Fold01\n 2 <split [8954/996]> Fold02\n 3 <split [8954/996]> Fold03\n 4 <split [8954/996]> Fold04\n 5 <split [8954/996]> Fold05\n 6 <split [8954/996]> Fold06\n 7 <split [8955/995]> Fold07\n 8 <split [8956/994]> Fold08\n 9 <split [8957/993]> Fold09\n10 <split [8958/992]> Fold10\n```\n\n\n:::\n:::\n\n\n\nA continuación, vamos a crear tres recetas de preprocesamiento de datos: una que sólo agrupa los niveles de los factores utilizados con poca frecuencia, otra que también crea variables indicadoras y, por último, otra que también crea términos spline para las pulgadas de más.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_rec <-\n  recipe(weight_lbs ~ ott + year + country + gpc_site,\n    data = pumpkin_train\n  ) %>%\n  step_other(country, gpc_site, threshold = 0.02)\n\nind_rec <-\n  base_rec %>%\n  step_dummy(all_nominal_predictors())\n\nspline_rec <-\n  ind_rec %>%\n  step_bs(ott)\n```\n:::\n\n\n\n\nA continuación, vamos a crear tres especificaciones de modelo: un modelo de random forest, un modelo MARS y un modelo lineal.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <-\n  rand_forest(trees = 1e3) %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"ranger\")\n\nmars_spec <-\n  mars() %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"earth\")\n\nlm_spec <- linear_reg()\n```\n:::\n\n\n\nAhora es el momento de juntar el preprocesamiento y los modelos en un `workflow_set()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npumpkin_set <-\n  workflow_set(\n    list(base_rec, ind_rec, spline_rec),\n    list(rf_spec, mars_spec, lm_spec),\n    cross = FALSE\n  )\n\npumpkin_set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 3 × 4\n  wflow_id             info             option    result    \n  <chr>                <list>           <list>    <list>    \n1 recipe_1_rand_forest <tibble [1 × 4]> <opts[0]> <list [0]>\n2 recipe_2_mars        <tibble [1 × 4]> <opts[0]> <list [0]>\n3 recipe_3_linear_reg  <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n\n\n:::\n:::\n\n\n\nUtilizamos `cross = FALSE` porque no queremos todas las combinaciones de estos componentes, sólo tres opciones para probar. Vamos a ajustar estos posibles candidatos a nuestras remuestreos para ver cuál de ellos funciona mejor.\n\n\n### Entrenamiento y Selección del Mejor Modelo\n\nUsamos `workflow_map` para evaluar los modelos en cada pliegue de validación cruzada y extraemos el mejor modelo según la raíz del error cuadrático medio (RMSE).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#doParallel::registerDoParallel()\nset.seed(2021)\n\npumpkin_rs <-\n  workflow_map(\n    pumpkin_set,\n    \"fit_resamples\",\n    resamples = pumpkin_folds\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n→ A | warning: some 'x' values beyond boundary knots may cause ill-conditioned bases\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThere were issues with some computations   A: x1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThere were issues with some computations   A: x2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n```{.r .cell-code}\npumpkin_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 3 × 4\n  wflow_id             info             option    result   \n  <chr>                <list>           <list>    <list>   \n1 recipe_1_rand_forest <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n2 recipe_2_mars        <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n3 recipe_3_linear_reg  <tibble [1 × 4]> <opts[1]> <rsmp[+]>\n```\n\n\n:::\n:::\n\n\n\n\n\n### Evaluar el conjunto de flujos de trabajo\n\nHow did our three candidates do?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(pumpkin_rs)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nNo hay mucha diferencia entre las tres opciones, y si acaso, nuestro modelo lineal con ingeniería de rasgos spline quizás lo hizo mejor. ¡Esto es bueno porque es un modelo más simple!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(pumpkin_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  wflow_id         .config preproc model .metric .estimator   mean     n std_err\n  <chr>            <chr>   <chr>   <chr> <chr>   <chr>       <dbl> <int>   <dbl>\n1 recipe_1_rand_f… Prepro… recipe  rand… rmse    standard   86.1      10 1.10e+0\n2 recipe_1_rand_f… Prepro… recipe  rand… rsq     standard    0.969    10 9.97e-4\n3 recipe_2_mars    Prepro… recipe  mars  rmse    standard   83.8      10 1.92e+0\n4 recipe_2_mars    Prepro… recipe  mars  rsq     standard    0.969    10 1.67e-3\n5 recipe_3_linear… Prepro… recipe  line… rmse    standard   82.4      10 2.27e+0\n6 recipe_3_linear… Prepro… recipe  line… rsq     standard    0.970    10 1.97e-3\n```\n\n\n:::\n:::\n\n\n\nPodemos extraer el flujo de trabajo que queremos utilizar y ajustarlo a nuestros datos de entrenamiento.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <-\n  extract_workflow(pumpkin_rs, \"recipe_3_linear_reg\") %>%\n  fit(pumpkin_train)\n```\n:::\n\n\n\n\nPodemos utilizar un objeto como este para predecir, por ejemplo en los datos de prueba como `predict(final_fit, pumpkin_test)`, o podemos examinar los parámetros del modelo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(final_fit) %>%\n  arrange(-abs(estimate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 5\n   term                                   estimate std.error statistic   p.value\n   <chr>                                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)                            -9731.     675.      -14.4   1.30e- 46\n 2 ott_bs_3                                2585.      25.6     101.    0        \n 3 ott_bs_2                                 450.      11.9      37.9   2.75e-293\n 4 ott_bs_1                                -345.      36.3      -9.50  2.49e- 21\n 5 gpc_site_Ohio.Valley.Giant.Pumpkin.Gr…    21.1      7.80      2.70  6.89e-  3\n 6 country_United.States                     11.9      5.66      2.11  3.53e-  2\n 7 gpc_site_Stillwater.Harvestfest           11.6      7.87      1.48  1.40e-  1\n 8 country_Germany                          -11.5      6.68     -1.71  8.64e-  2\n 9 country_other                            -10.7      6.33     -1.69  9.13e-  2\n10 country_Canada                             9.29     6.12      1.52  1.29e-  1\n11 country_Italy                              8.12     7.02      1.16  2.47e-  1\n12 gpc_site_Elk.Grove.Giant.Pumpkin.Fest…    -7.81     7.70     -1.01  3.10e-  1\n13 year                                       4.89     0.334    14.6   5.03e- 48\n14 gpc_site_Wiegemeisterschaft.Berlin.Br…     1.51     8.07      0.187 8.51e-  1\n15 gpc_site_other                             1.41     5.60      0.251 8.02e-  1\n```\n\n\n:::\n:::\n\n\n\nLos términos spline son, con mucho, los más importantes, pero se observan indicios de que determinados lugares y países predicen el peso (ya sea hacia arriba o hacia abajo), así como una pequeña tendencia de calabazas más pesadas con el año.\n\n\n### Conclusión\n\nEl análisis predictivo de peso de calabazas gigantes usando `tidymodels` permite una comparación robusta de múltiples modelos y una visualización clara del desempeño. Este flujo de trabajo facilita tanto la elección del modelo adecuado como la interpretación de los factores que afectan la variable de respuesta. ¡Explorar estos modelos en sus propios datos puede ser un ejercicio valioso para mejorar la comprensión de las herramientas de `tidymodels`!\n\n\nFuente: Julia Silge\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}