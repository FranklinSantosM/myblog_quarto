{
  "hash": "b5059c4cebfc534f573812e1726d7cd2",
  "result": {
    "markdown": "---\ntitle: \"Ordenar datos con el paquete Tidyverse\"\ndescription: |\n  Es un ejemplo de caso extraido del libro R4DS.\ncategories:\n  - Data Science\n  - Tidy Data\n  - Tidyverse\nauthor:\n  - name: Franklin Santos\n    url: https://franklinsantos.com\n    affiliation: AgriTech Bolivia\n    orcid: 0000-0002-7509-2910\ndate: \"2020-10-31\"\nimage: featured.png\n---\n\n\n<style>\nbody {\ntext-align: justify}\n</style>\n\n## Introducción\nLa ordenación de datos es una de las tareas mas importantes despues de concluir la investigación. En las ciencias agrícolas, generalmente la investigación concluye con la evaluación de la cosecha del cultivo. Generalmente nuestros datos pueden estar organizados en un libro de campo; sin embargo, en otras áreas no es así.\n\nEn este blog replicaré un ejemplo de ordenación de datos con el paquete `Tidyverse` del libro R4DS. El dataset `datos::oms` contiene datos de `tuberculosis` (TB) detallados por año, país, edad, sexo y método de diagnóstico. Los datos provienen del Informe de Tuberculosis de la Organización Mundial de la Salud 2014, disponible en <http://www.who.int/tb/country/data/download/en/>.\n\n## Procedimiento de ordenación\n### Cargar el paquete `tidyverse`\nEl primer paso es instalar el paquete `tidyverse` del CRAN de R. Posterior a esto es cargar el paquete en nuestra consola de R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n#En el paquete datos se encuentra la base de datos para este ejemplo\nlibrary(datos)\n```\n:::\n\n\nA continuación observación el estado de los datos de `oms`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(oms)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 60\n  pais       iso2  iso3   anio nuevos_…¹ nuevo…² nuevo…³ nuevo…⁴ nuevo…⁵ nuevo…⁶\n  <chr>      <chr> <chr> <int>     <int>   <int>   <int>   <int>   <int>   <int>\n1 Afganistán AF    AFG    1980        NA      NA      NA      NA      NA      NA\n2 Afganistán AF    AFG    1981        NA      NA      NA      NA      NA      NA\n3 Afganistán AF    AFG    1982        NA      NA      NA      NA      NA      NA\n4 Afganistán AF    AFG    1983        NA      NA      NA      NA      NA      NA\n5 Afganistán AF    AFG    1984        NA      NA      NA      NA      NA      NA\n6 Afganistán AF    AFG    1985        NA      NA      NA      NA      NA      NA\n# … with 50 more variables: nuevos_fpp_h65 <int>, nuevos_fpp_m014 <int>,\n#   nuevos_fpp_m1524 <int>, nuevos_fpp_m2534 <int>, nuevos_fpp_m3544 <int>,\n#   nuevos_fpp_m4554 <int>, nuevos_fpp_m5564 <int>, nuevos_fpp_m65 <int>,\n#   nuevos_fpn_h014 <int>, nuevos_fpn_h1524 <int>, nuevos_fpn_h2534 <int>,\n#   nuevos_fpn_h3544 <int>, nuevos_fpn_h4554 <int>, nuevos_fpn_h5564 <int>,\n#   nuevos_fpn_h65 <int>, nuevos_fpn_m014 <int>, nuevos_fpn_m1524 <int>,\n#   nuevos_fpn_m2534 <int>, nuevos_fpn_m3544 <int>, nuevos_fpn_m4554 <int>, …\n```\n:::\n:::\n\n\nEn la salida se observa un ejemplo muy típico de una base de datos de la vida real. Contiene columnas redundantes, códigos extraños de variables y muchos valores faltantes. Practicamente, la base de datos `oms` está desordenado, por tanto, se necesita ordenarlo de manera sencilla con tidyverse.\n\n### Pasos de ordenación\nNecesitamos agrupar todas las columnas desde `nuevos_fpp_h014` hasta `recaidas_m65`. No sabemos aún qué representa esto, por lo que le daremos el nombre genérico de `\"clave\"`. Sabemos que las celdas representan la cuenta de casos, por lo que usaremos la variable `casos`.\n\nExisten múltiples valores faltantes en la representación actual, por lo que de momento usaremos `na.rm` para centrarnos en los valores que están presentes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noms1 <- oms %>%\n  pivot_longer(\n    cols = nuevos_fpp_h014:nuevosrecaida_m65, \n    names_to = \"clave\", \n    values_to = \"casos\", \n    values_drop_na = TRUE\n  )\noms1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,046 × 6\n   pais       iso2  iso3   anio clave            casos\n   <chr>      <chr> <chr> <int> <chr>            <int>\n 1 Afganistán AF    AFG    1997 nuevos_fpp_h014      0\n 2 Afganistán AF    AFG    1997 nuevos_fpp_h1524    10\n 3 Afganistán AF    AFG    1997 nuevos_fpp_h2534     6\n 4 Afganistán AF    AFG    1997 nuevos_fpp_h3544     3\n 5 Afganistán AF    AFG    1997 nuevos_fpp_h4554     5\n 6 Afganistán AF    AFG    1997 nuevos_fpp_h5564     2\n 7 Afganistán AF    AFG    1997 nuevos_fpp_h65       0\n 8 Afganistán AF    AFG    1997 nuevos_fpp_m014      5\n 9 Afganistán AF    AFG    1997 nuevos_fpp_m1524    38\n10 Afganistán AF    AFG    1997 nuevos_fpp_m2534    36\n# … with 76,036 more rows\n```\n:::\n:::\n\n\nPara visualizar el conteo de valores en la nueva columna `clave`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noms1 %>%\n  count(clave)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 56 × 2\n   clave               n\n   <chr>           <int>\n 1 nuevos_ep_h014   1038\n 2 nuevos_ep_h1524  1026\n 3 nuevos_ep_h2534  1020\n 4 nuevos_ep_h3544  1024\n 5 nuevos_ep_h4554  1020\n 6 nuevos_ep_h5564  1015\n 7 nuevos_ep_h65    1018\n 8 nuevos_ep_m014   1032\n 9 nuevos_ep_m1524  1021\n10 nuevos_ep_m2534  1021\n# … with 46 more rows\n```\n:::\n:::\n\n\nPara entender el significado de cada variable, se dispone de un diccionario de datos a mano. Este dice lo siguiente:\n\n(@)    Lo que aparece antes del primer `_` en las columnas indica si la columna contiene casos nuevos o antiguos de tuberculosis. En este dataset, cada columna contiene nuevos casos.\n\n(@)    Lo que aparece luego de indicar si se refiere casos nuevos o antiguos es el tipo de tuberculosis:\n  - `recaida` se refiere a casos reincidentes\n  - `ep` se refiere a tuberculosis extra pulmonar\n  - `fpn` se refiere a casos de tuberculosis pulmonar que no se pueden detectar mediante examen de frotis pulmonar (frotis pulmonar negativo)\n  - `fpp` se refiere a casos de tuberculosis pulmonar que se pueden detectar mediante examen de frotis pulmonar (frotis pulmonar positivo)\n\n(@)    La letra que aparece después del último `_` se refiere al sexo de los pacientes. El conjunto de datos agrupa en hombres (`h`) y mujeres (`m`).\n\n(@)    Los números finales se refieren al grupo etareo que se ha organizado en siete categorías:\n\n  * `014` = `0 - 14` años de edad\n  * `1524` = `15 – 24` años de edad\n  * `2534` = `25 – 34` años de edad\n  * `3544` = `35 – 44` años de edad\n  * `4554` = `45 – 54` años de edad\n  * `5564` = `55 – 64` años de edad\n  * `65` = `65` o más años de edad\n\nNecesitamos hacer un pequeño cambio al formato de los nombres de las columnas: desafortunadamente lo nombres de las columnas son ligeramente inconsistentes debido a que en lugar de `nuevos_recaida` tenemos `nuevosrecaida` (es difícil darse cuenta de esto en esta parte, pero si no lo arreglas habrá errores en los pasos siguientes). Para esto, la idea básica es bastante simple: reemplazar los caracteres `“nuevosrecaida”` por `“nuevos_recaida”`. Esto genera nombres de variables consistentes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noms2 <- oms1 %>%\n  mutate(clave = stringr::str_replace(clave, \"nuevosrecaida\", \"nuevos_recaida\"))\noms2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,046 × 6\n   pais       iso2  iso3   anio clave            casos\n   <chr>      <chr> <chr> <int> <chr>            <int>\n 1 Afganistán AF    AFG    1997 nuevos_fpp_h014      0\n 2 Afganistán AF    AFG    1997 nuevos_fpp_h1524    10\n 3 Afganistán AF    AFG    1997 nuevos_fpp_h2534     6\n 4 Afganistán AF    AFG    1997 nuevos_fpp_h3544     3\n 5 Afganistán AF    AFG    1997 nuevos_fpp_h4554     5\n 6 Afganistán AF    AFG    1997 nuevos_fpp_h5564     2\n 7 Afganistán AF    AFG    1997 nuevos_fpp_h65       0\n 8 Afganistán AF    AFG    1997 nuevos_fpp_m014      5\n 9 Afganistán AF    AFG    1997 nuevos_fpp_m1524    38\n10 Afganistán AF    AFG    1997 nuevos_fpp_m2534    36\n# … with 76,036 more rows\n```\n:::\n:::\n\n\nUna vez reemplazado, nos facilita separar los valores en cada código aplicando `separate()` dos veces. La primera aplicación dividirá los códigos en cada `_`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noms3 <- oms2 %>%\n  separate(clave, c(\"nuevos\", \"tipo\", \"sexo_edad\"), sep = \"_\")\noms3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,046 × 8\n   pais       iso2  iso3   anio nuevos tipo  sexo_edad casos\n   <chr>      <chr> <chr> <int> <chr>  <chr> <chr>     <int>\n 1 Afganistán AF    AFG    1997 nuevos fpp   h014          0\n 2 Afganistán AF    AFG    1997 nuevos fpp   h1524        10\n 3 Afganistán AF    AFG    1997 nuevos fpp   h2534         6\n 4 Afganistán AF    AFG    1997 nuevos fpp   h3544         3\n 5 Afganistán AF    AFG    1997 nuevos fpp   h4554         5\n 6 Afganistán AF    AFG    1997 nuevos fpp   h5564         2\n 7 Afganistán AF    AFG    1997 nuevos fpp   h65           0\n 8 Afganistán AF    AFG    1997 nuevos fpp   m014          5\n 9 Afganistán AF    AFG    1997 nuevos fpp   m1524        38\n10 Afganistán AF    AFG    1997 nuevos fpp   m2534        36\n# … with 76,036 more rows\n```\n:::\n:::\n\n\nA continuación podemos eliminar la columna `nuevos`, ya que es constante en este dataset. Además eliminaremos `iso2` e `iso3` ya que son redundantes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noms3 %>%\n  count(nuevos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  nuevos     n\n  <chr>  <int>\n1 nuevos 76046\n```\n:::\n\n```{.r .cell-code}\noms4 <- oms3 %>%\n  select(-nuevos, -iso2, -iso3)\n```\n:::\n\n\nLuego separamos `sexo_edad` en `sexo` y `edad` dividiendo luego del primer carácter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noms5 <- oms4 %>%\n  separate(sexo_edad, c(\"sexo\", \"edad\"), sep = 1)\noms5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,046 × 6\n   pais        anio tipo  sexo  edad  casos\n   <chr>      <int> <chr> <chr> <chr> <int>\n 1 Afganistán  1997 fpp   h     014       0\n 2 Afganistán  1997 fpp   h     1524     10\n 3 Afganistán  1997 fpp   h     2534      6\n 4 Afganistán  1997 fpp   h     3544      3\n 5 Afganistán  1997 fpp   h     4554      5\n 6 Afganistán  1997 fpp   h     5564      2\n 7 Afganistán  1997 fpp   h     65        0\n 8 Afganistán  1997 fpp   m     014       5\n 9 Afganistán  1997 fpp   m     1524     38\n10 Afganistán  1997 fpp   m     2534     36\n# … with 76,036 more rows\n```\n:::\n:::\n\n\n¡Ahora la base de datos `oms` está ordenado!\n\n## Resumen\nEn la anterior sección se hizo el procedimiento de ordenación paso a paso, asignando los resultados intermedios a nuevas variables. Esta no es la forma típica de trabajo. \nEn realidad, los códigos debería ser de manera incremental usando `pipes (\"%>%)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfsdata<- oms %>%\n  pivot_longer(\n    cols = nuevos_fpp_h014:nuevosrecaida_m65,\n    names_to = \"clave\", \n    values_to = \"valor\", \n    values_drop_na = TRUE) %>%\n  mutate(clave = stringr::str_replace(clave, \"nuevosrecaida\", \"nuevos_recaida\")) %>%\n  separate(clave, c(\"nuevos\", \"tipo\", \"sexo_edad\")) %>%\n  select(-nuevos, -iso2, -iso3) %>%\n  separate(sexo_edad, c(\"sexo\", \"edad\"), sep = 1)\nfsdata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 76,046 × 6\n   pais        anio tipo  sexo  edad  valor\n   <chr>      <int> <chr> <chr> <chr> <int>\n 1 Afganistán  1997 fpp   h     014       0\n 2 Afganistán  1997 fpp   h     1524     10\n 3 Afganistán  1997 fpp   h     2534      6\n 4 Afganistán  1997 fpp   h     3544      3\n 5 Afganistán  1997 fpp   h     4554      5\n 6 Afganistán  1997 fpp   h     5564      2\n 7 Afganistán  1997 fpp   h     65        0\n 8 Afganistán  1997 fpp   m     014       5\n 9 Afganistán  1997 fpp   m     1524     38\n10 Afganistán  1997 fpp   m     2534     36\n# … with 76,036 more rows\n```\n:::\n:::\n\n\n\n## Conclusión\nEs un ejemplo muy bueno para practicar y usar las diferentes funciones de `tidyverse` en la ordenación de datos.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}