install.packages("emmeans")
#| warning: false
#| echo: false
library(tidyverse)
library(metan)
library(flextable)
library(kableExtra)
#| echo: false
#datos originales
head(iris)
data = iris %>% # Asignando a una variable
dplyr::select("Species", #Ordenando los datos
everything())
head(data)
#| echo: false
#Assign column names
cols = names(data)[2:ncol(data)]
#| echo: false
#Analysis of variance model
aov.model = lapply(cols, FUN = function(x)
aov(reformulate(termlabels = "Species",
response = x),
data = data))
anova(aov.model[[2]])
aov.model
library(emmeans)
medias = emmeans(aov.model, ~Species)
anova = aov(Sepal.Length ~ Species, data = data)
summary(anova)
medias = emmeans(anova, ~Species)
pwpm(medias)
pwpp(medias)
#| warning: false
#| echo: false
library(tidyverse)
library(metan)
library(flextable)
library(kableExtra)
#| echo: false
#datos originales
head(iris)
data = iris %>% # Asignando a una variable
dplyr::select("Species", #Ordenando los datos
everything())
head(data)
#| echo: false
desc_stat(data,
stats = c("mean, se, kurt, skew, min, max")) %>%
round_cols() %>%
kbl(caption = "Análisis descriptivo")%>%
kable_classic(full_width = F, html_font = "Cambria")
#| echo: false
p1 = ggplot(data = data,
aes(x=Species,
y=Sepal.Length,
color=Species)) +
geom_boxplot() +
geom_jitter() +
stat_summary(fun = "mean", geom = "point", color = "black") +
theme_classic() +
theme(legend.position = "") +
labs(x="Especies",
y="Longitud de sépalo (mm)")
p2 = ggplot(data = data,
aes(x=Species,
y=Sepal.Width,
color=Species)) +
geom_boxplot() +
geom_jitter() +
stat_summary(fun = "mean", geom = "point", color = "black") +
theme_classic() +
theme(legend.position = "") +
labs(x="Especies",
y="Ancho de sépalo (mm)")
p3 = ggplot(data = data,
aes(x=Species,
y=Petal.Length,
color=Species)) +
geom_boxplot() +
geom_jitter() +
stat_summary(fun = "mean", geom = "point", color = "black") +
theme_classic() +
theme(legend.position = "") +
labs(x="Especies",
y="Longitud de Pétalo (mm)")
p4 = ggplot(data = data,
aes(x=Species,
y=Petal.Width,
color=Species)) +
geom_boxplot() +
geom_jitter() +
stat_summary(fun = "mean", geom = "point", color = "black") +
theme_classic() +
theme(legend.position = "") +
labs(x="Especies",
y="Ancho de pétalo (mm)")
arrange_ggplot(p1, p2, p3, p4,
ncol = 2,
tag_levels = "a")
#| echo: false
#Assign column names
cols = names(data)[2:ncol(data)]
#| echo: false
#Analysis of variance model
aov.model = lapply(cols, FUN = function(x)
aov(reformulate(termlabels = "Species",
response = x),
data = data))
anova(aov.model[[2]])
#| echo: false
# print df, MS and P-value
final1 = anova(aov.model[[1]])[,c(1,3,5)]
# Getting rownames
rnames = rownames(final1)
#setting column names
colnames(final1) = c("DF", "MS", "P-value")
colnames(final1)[2] = cols[1]
# Rounding values to 2 decimal place
final1 = as.data.frame(round(final1, digits = 2))
# Assign asterisks according to p values
final1$sign[final1$`P-value` < 0.05] = "*"
final1$sign[final1$`P-value` < 0.01] = "**"
final1$sign[final1$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final1[[2]] = paste(final1[[2]], ifelse(is.na(final1[[4]]), "", final1[[4]]))
# Delete extra column from anova
final1 = final1[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# print df, MS and P-value
final = anova(aov.model[[2]])[,c(1,3,5)]
# Getting rownames
rnames = rownames(final)
#setting column names
colnames(final) = c("DF", "MS", "P-value")
colnames(final)[2] = cols[2]
# Rounding values to 2 decimal place
final = as.data.frame(round(final, digits = 2))
# Assign asterisks according to p values
final$sign[final$`P-value` < 0.05] = "*"
final$sign[final$`P-value` < 0.01] = "**"
final$sign[final$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final[[2]] = paste(final[[2]], ifelse(is.na(final[[4]]), "", final[[4]]))
# Delete extra column from anova
final = final[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# print df, MS and P-value
final3 = anova(aov.model[[3]])[,c(1,3,5)]
# Getting rownames
rnames = rownames(final3)
#setting column names
colnames(final3) = c("DF", "MS", "P-value")
colnames(final3)[2] = cols[3]
# Rounding values to 2 decimal place
final3 = as.data.frame(round(final3, digits = 2))
# Assign asterisks according to p values
final3$sign[final3$`P-value` < 0.05] = "*"
final3$sign[final3$`P-value` < 0.01] = "**"
final3$sign[final3$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final3[[2]] = paste(final3[[2]], ifelse(is.na(final3[[4]]), "", final3[[4]]))
# Delete extra column from anova
final3 = final3[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# print df, MS and P-value
final4 = anova(aov.model[[4]])[,c(1,3,5)]
# Getting rownames
rnames = rownames(final4)
#setting column names
colnames(final4) = c("DF", "MS", "P-value")
colnames(final4)[2] = cols[4]
# Rounding values to 2 decimal place
final4 = as.data.frame(round(final4, digits = 2))
# Assign asterisks according to p values
final4$sign[final4$`P-value` < 0.05] = "*"
final4$sign[final4$`P-value` < 0.01] = "**"
final4$sign[final4$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final4[[2]] = paste(final4[[2]], ifelse(is.na(final4[[4]]), "", final4[[4]]))
# Delete extra column from anova
final4 = final4[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# Join Data
j1 = inner_join(final1, final, by = "FV")%>%
select(-"DF.y")
j2 = left_join(final3, final4, by = "FV")%>%
select(-"DF.x",-"DF.y")
jfinal = left_join(j1, j2, by = "FV") %>%
rename(DF = DF.x)
jfinal %>%
kbl(caption = "Análisis de varianza")%>%
kable_classic(full_width = F, html_font = "Cambria")
pwpp(medias)
pwpp(medias)
pwpp(medias)
plot(medias,
CIs = FALSE,
comparisons = TRUE)
install.packages("AgroR")
# Utilizando paquete AgroR
library(AgroR)
with(data,
DIC(Species, Sepal.Length))
with(data,
DIC(Species, Sepal.Length))
# set a theme plot
my_theme = theme_bw()+
theme(legend.title = element_blank(),
axis.title = element_text(color = "black"),
axis.text = element_text(colour = "black"),
panel.grid.minor = element_blank())
plot(medias,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Length)) +
my_theme
anova = aov(Sepal.Length, Sepal.width ~ Species, data = data)
anova1 = aov(Sepal.Length ~ Species, data = data)
anova2 = aov(Sepal.Width ~ Species, data = data)
anova3 = aov(Petal.Length ~ Species, data = data)
anova4 = aov(Petal.Width ~ Species, data = data)
#comparacion de medias
medias1 = emmeans(anova1, ~Species)
medias2 = emmeans(anova2, ~Species)
medias3 = emmeans(anova3, ~Species)
medias4 = emmeans(anova4, ~Species)
pwpm(medias1, medias2, medias3, medias4)
pwpm(c(medias1, medias2, medias3, medias4))
p1 = plot(medias1,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Length)) +
my_theme
p2 = plot(medias2,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Width)) +
my_theme
p3 = plot(medias3,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Petal.Length)) +
my_theme
p4 = plot(medias4,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Width)) +
my_theme
arrange_ggplot((p1 + p2 + p3 + p4),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
p3
arrange_ggplot((p1 + p2),
(p3 + p4),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
arrange_ggplot((p1 + p2 + p3 + p4),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
install.packages("rnaturalearth")
library(tidyverse)
library(tidyverse)
library(rnaturalearth)
#| out-width: "100%"
# America del sur
sam = ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
install.packages("rnaturalearthdata")
#| out-width: "100%"
# America del sur
sam = ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
View(sam)
p1 = ggplot() +
geom_sf(data = sam, fill = "white") +
theme_light() +
xlim(c(-90, -35))
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "LP", "Outros"))
install.packages("rnaturalearthhires")
p1
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "LP", "Outros"))
install.packages("devtools")
devtools::install_github("ropensci/rnaturalearthhires")
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "LP", "Outros"))
p2 =
p1 +
geom_sf(data = bolivia, aes(fill = scat))
p2
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "La Paz", "Otros"))
p2 =
p1 +
geom_sf(data = bolivia, aes(fill = scat))
p2
bolivia
lp =
read_municipality(code_muni = "LP",
simplified = FALSE,
showProgress = FALSE) %>%
mutate(huarina = ifelse(name_muni == "Huarina",
"Huarina",
"Otros"))
