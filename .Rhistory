final$sign[final$`P-value` < 0.01] = "**"
final$sign[final$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final[[2]] = paste(final[[2]], ifelse(is.na(final[[4]]), "", final[[4]]))
# Delete extra column from anova
final = final[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# print df, MS and P-value
final3 = anova(aov.model[[3]])[,c(1,3,5)]
# Getting rownames
rnames = rownames(final3)
#setting column names
colnames(final3) = c("DF", "MS", "P-value")
colnames(final3)[2] = cols[3]
# Rounding values to 2 decimal place
final3 = as.data.frame(round(final3, digits = 2))
# Assign asterisks according to p values
final3$sign[final3$`P-value` < 0.05] = "*"
final3$sign[final3$`P-value` < 0.01] = "**"
final3$sign[final3$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final3[[2]] = paste(final3[[2]], ifelse(is.na(final3[[4]]), "", final3[[4]]))
# Delete extra column from anova
final3 = final3[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# print df, MS and P-value
final4 = anova(aov.model[[4]])[,c(1,3,5)]
# Getting rownames
rnames = rownames(final4)
#setting column names
colnames(final4) = c("DF", "MS", "P-value")
colnames(final4)[2] = cols[4]
# Rounding values to 2 decimal place
final4 = as.data.frame(round(final4, digits = 2))
# Assign asterisks according to p values
final4$sign[final4$`P-value` < 0.05] = "*"
final4$sign[final4$`P-value` < 0.01] = "**"
final4$sign[final4$`P-value` > 0.05] = "ns"
# Merge MS and significance column together
final4[[2]] = paste(final4[[2]], ifelse(is.na(final4[[4]]), "", final4[[4]]))
# Delete extra column from anova
final4 = final4[-c(3,4)]%>%
rownames_to_column(var = "FV")%>%
as_tibble()
#| echo: false
# Join Data
j1 = inner_join(final1, final, by = "FV")%>%
select(-"DF.y")
j2 = left_join(final3, final4, by = "FV")%>%
select(-"DF.x",-"DF.y")
jfinal = left_join(j1, j2, by = "FV") %>%
rename(DF = DF.x)
jfinal %>%
kbl(caption = "AnÃ¡lisis de varianza")%>%
kable_classic(full_width = F, html_font = "Cambria")
pwpp(medias)
pwpp(medias)
pwpp(medias)
plot(medias,
CIs = FALSE,
comparisons = TRUE)
install.packages("AgroR")
# Utilizando paquete AgroR
library(AgroR)
with(data,
DIC(Species, Sepal.Length))
with(data,
DIC(Species, Sepal.Length))
# set a theme plot
my_theme = theme_bw()+
theme(legend.title = element_blank(),
axis.title = element_text(color = "black"),
axis.text = element_text(colour = "black"),
panel.grid.minor = element_blank())
plot(medias,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Length)) +
my_theme
anova = aov(Sepal.Length, Sepal.width ~ Species, data = data)
anova1 = aov(Sepal.Length ~ Species, data = data)
anova2 = aov(Sepal.Width ~ Species, data = data)
anova3 = aov(Petal.Length ~ Species, data = data)
anova4 = aov(Petal.Width ~ Species, data = data)
#comparacion de medias
medias1 = emmeans(anova1, ~Species)
medias2 = emmeans(anova2, ~Species)
medias3 = emmeans(anova3, ~Species)
medias4 = emmeans(anova4, ~Species)
pwpm(medias1, medias2, medias3, medias4)
pwpm(c(medias1, medias2, medias3, medias4))
p1 = plot(medias1,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Length)) +
my_theme
p2 = plot(medias2,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Width)) +
my_theme
p3 = plot(medias3,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Petal.Length)) +
my_theme
p4 = plot(medias4,
CIs = FALSE,
comparisons = TRUE,
xlab = "Mean",
ylab = "Treatments") +
geom_vline(xintercept = mean(data$Sepal.Width)) +
my_theme
arrange_ggplot((p1 + p2 + p3 + p4),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
p3
arrange_ggplot((p1 + p2),
(p3 + p4),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
arrange_ggplot((p1 + p2 + p3 + p4),
nrow = 2,
heights = c(0.6, 1),
tag_levels = "a",
guides = "collect")
install.packages("rnaturalearth")
library(tidyverse)
library(tidyverse)
library(rnaturalearth)
#| out-width: "100%"
# America del sur
sam = ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
install.packages("rnaturalearthdata")
#| out-width: "100%"
# America del sur
sam = ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
View(sam)
p1 = ggplot() +
geom_sf(data = sam, fill = "white") +
theme_light() +
xlim(c(-90, -35))
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "LP", "Outros"))
install.packages("rnaturalearthhires")
p1
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "LP", "Outros"))
install.packages("devtools")
devtools::install_github("ropensci/rnaturalearthhires")
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "LP", "Outros"))
p2 =
p1 +
geom_sf(data = bolivia, aes(fill = scat))
p2
bolivia = ne_states(country = "bolivia", returnclass = "sf") %>%
mutate(scat = ifelse(postal == "LP", "La Paz", "Otros"))
p2 =
p1 +
geom_sf(data = bolivia, aes(fill = scat))
p2
bolivia
lp =
read_municipality(code_muni = "LP",
simplified = FALSE,
showProgress = FALSE) %>%
mutate(huarina = ifelse(name_muni == "Huarina",
"Huarina",
"Otros"))
#| warning: false
#| echo: false
library(tidyverse)
library(metan)
library(flextable)
library(kableExtra)
#| echo: false
#datos originales
head(iris)
data = iris %>% # Asignando a una variable
dplyr::select("Species", #Ordenando los datos
everything())
head(data)
df = data %>%
means_by(Species)%>%
round_cols()%>%
column_to_rownames("Species")
View(df)
(ideotype_vector = c(rep("l", 9), rep("h", 13)))
(weight = c(rep(1, 9), 4, 1, 4, rep(1, 10)))
mgidi = mgidi(df,                         # a two-way table
ideotype = ideotype_vector, # ideotype vector
weights = weight,           # weight vector
SI = 50)                    # select two treatments
(ideotype_vector = c(rep("l", 3), rep("h", 4)))
mgidi = mgidi(df,                         # a two-way table
ideotype = ideotype_vector, # ideotype vector
weights = weight,           # weight vector
SI = 50)                    # select two treatments
mgidi = mgidi(df,                         # a two-way table
#ideotype = ideotype_vector, # ideotype vector
#weights = weight,           # weight vector
SI = 50)                    # select two treatments
#Plot the MGIDI index
p_ind_cul_ori =
plot(mgidi,
SI = 50,
radar = FALSE,
x.lab = "Species",
y.lab = "MGIDI index") +
my_theme +
theme(legend.title = element_blank(),
legend.position = "bottom")
#| echo: false
# set a theme plot
my_theme = theme_bw()+
theme(legend.title = element_blank(),
axis.title = element_text(color = "black"),
axis.text = element_text(colour = "black"),
panel.grid.minor = element_blank())
#Plot the MGIDI index
p_ind_cul_ori =
plot(mgidi,
SI = 50,
radar = FALSE,
x.lab = "Species",
y.lab = "MGIDI index") +
my_theme +
theme(legend.title = element_blank(),
legend.position = "bottom")
p_ind_cul_ori
#Plot the MGIDI index
p_ind_species =
plot(mgidi,
SI = 50,
radar = FALSE,
x.lab = "Species",
y.lab = "MGIDI index") +
my_theme +
theme(legend.title = element_blank(),
legend.position = "bottom")
mgidi_species = mgidi(df,                         # a two-way table
SI = 50)                    # select two treatments
#Plot the MGIDI index
p_ind_species =
plot(mgidi_species,
SI = 50,
radar = FALSE,
x.lab = "Species",
y.lab = "MGIDI index") +
my_theme +
theme(legend.title = element_blank(),
legend.position = "bottom")
# The strengths and weaknesses view
p_cont_species =
plot(mgidi_species,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
p_cont_species
# PCA
pca_species = prcomp(df, scale. = TRUE)
factors =
mgidi_species$sel_dif %>%
select(VAR, Factor)
factors =
data.frame(VAR = names(df)) %>%
left_join(factors)
install.packages("factoextra")
# PCA
library(factoextra)
pca_species = prcomp(df, scale. = TRUE)
factors =
mgidi_species$sel_dif %>%
select(VAR, Factor)
factors =
data.frame(VAR = names(df)) %>%
left_join(factors)
pca =
fviz_pca_biplot(pca_species,
repel = TRUE,
col.var = factors$Factor) +
labs(color = "") +
my_theme +
theme(legend.position = "bottom")
# Save the plot
arrange_ggplot(p_ind_species,
p_cont_species,
pca,
ncol = 3,
tag_levels = "a")
# The strengths and weaknesses view
p_cont_species =
plot(mgidi_species,
type = "", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
# The strengths and weaknesses view
p_cont_species =
plot(mgidi_species,
type = "index", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
# The strengths and weaknesses view
p_cont_species =
plot(mgidi_species,
type = "contrubution", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
# The strengths and weaknesses view
p_cont_species =
plot(mgidi_species,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
mgidi_species = mgidi(df,                         # a two-way table
SI = 30)                    # select two treatments
#Plot the MGIDI index
p_ind_species =
plot(mgidi_species,
SI = 30,
radar = FALSE,
x.lab = "Species",
y.lab = "MGIDI index") +
my_theme +
theme(legend.title = element_blank(),
legend.position = "bottom")
# The strengths and weaknesses view
p_cont_species =
plot(mgidi_species,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
p_cont_species
import("https://bit.ly/strawberry_data", setclass = "tbl")%>%
metan::as_factor(1:4)
read_csv("https://github.com/FranklinSantosM/data_repo/blob/main/data_mgidi_strawberry.csv")
df_fs = read_csv("https://github.com/FranklinSantosM/data_repo/blob/main/data_mgidi_strawberry.csv")
install.packages("rio")
library(rio)
import("https://bit.ly/strawberry_data", setclass = "tbl")%>%
metan::as_factor(1:4)
df %>%
means_by(ORI, CUL)
df %>%
means_by(ORI, CUL)%>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL)
# data for example
df = import("https://bit.ly/strawberry_data", setclass = "tbl")%>%
metan::as_factor(1:4)
df %>%
means_by(ORI, CUL)%>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL)
#| echo: false
df_ori_cul = df %>%
means_by(ORI, CUL)%>%
concatenate(ORI, CUL, new_var = TRAT, .after = CUL)%>%
remove_cols(ORI, CUL) %>%
round_cols()%>%
column_to_rownames("TRAT")
df_ori_cul
#| echo: false
mgidi_species = mgidi(df_ori_cul,                         # a two-way table
SI = 50)                    # select two treatments
#| echo: false
mgidi_cul_ori = mgidi(df_ori_cul,                         # a two-way table
SI = 50)                    # select two treatments
#| echo: false
#Plot the MGIDI index
p_ind_cult_ori =
plot(mgidi_cul_ori
SI = 50,
#| echo: false
# The strengths and weaknesses view
p_cont_cul_ori =
plot(mgidi_cul_ori,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
pca_cul_ori = prcomp(df_ori_cul, scale. = TRUE)
pca =
fviz_pca_biplot(pca_cul_ori,
repel = TRUE,
col.var = factors$Factor) +
labs(color = "") +
my_theme +
theme(legend.position = "bottom")
#| echo: false
# Save the plot
arrange_ggplot(p_ind_cult_ori,
p_cont_cul_ori,
pca,
ncol = 3,
tag_levels = "a")
#| echo: false
#Plot the MGIDI index
p_ind_cult_ori =
plot(mgidi_cul_ori,
SI = 50,
radar = FALSE,
x.lab = "Species",
y.lab = "MGIDI index") +
my_theme +
theme(legend.title = element_blank(),
legend.position = "bottom")
#| echo: false
# The strengths and weaknesses view
p_cont_cul_ori =
plot(mgidi_cul_ori,
type = "contribution", # Get the proportion plot
genotypes = "all", # All treatment (selected treatment are plotted by default)
title = "") +
my_theme +
theme(legend.position = "bottom")
pca_cul_ori = prcomp(df_ori_cul, scale. = TRUE)
factors =
mgidi_cul_ori$sel_dif %>%
select(VAR, Factor)
factors =
data.frame(VAR = names(df_ori_cul)) %>%
left_join(factors)
pca =
fviz_pca_biplot(pca_cul_ori,
repel = TRUE,
col.var = factors$Factor) +
labs(color = "") +
my_theme +
theme(legend.position = "bottom")
#| echo: false
# Save the plot
arrange_ggplot(p_ind_cult_ori,
p_cont_cul_ori,
pca,
ncol = 3,
tag_levels = "a")
ggsave("figs/fig3.pdf", width = 4, height = 7)
library(rsm)
cc_design_1 <- ccd(
basis = 3,         # Number of factors
n0    = 3,         # Number of central points
randomize = FALSE # Not randomized
)
View(cc_design_1)
head(as.data.frame(cc_design_1))
cc_design_1 <- ccd(
basis = 3,         # Number of factors
n0    = 3,         # Number of central points
randomize = FALSE, # Not randomized
coding = list(
x1 ~ (Temperature - 50) / 25,
x2 ~ (Power - 210)/ 30,
x3 ~ (time - 30) / 15,
x4 ~ (Ethanol - 80) / 20
)
)
cc_design_1 <- ccd(
basis = 3,         # Number of factors
n0    = 3,         # Number of central points
randomize = FALSE, # Not randomized
coding = list(
x1 ~ (Temperature - 50) / 25,
x2 ~ (Power - 210)/ 30,
x3 ~ (time - 30) / 15,
x4 ~ (Ethanol - 80) / 20
)
)
cc_design_1 <- ccd(
basis = 3,         # Number of factors
n0    = 3,         # Number of central points
randomize = FALSE, # Not randomized
coding = list(
x1 ~ (Temperature - 50) / 25,
x2 ~ (Power - 210)/ 30,
x3 ~ (time - 30) / 15
)
)
head(cc_design_1)
View(cc_design_1)
